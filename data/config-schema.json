{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "definitions": {
    "ILocalConfig": {
      "description": "For local dev networks, we can control what their parameters are. These can\nbe used to fill the parameters to IGethFlags, for example, when we start a\nlocal network. But they should be generic enough to support all the backends.\n\nTODO[hengchu]: I'm not super sure what the parameters should be yet, but\nhere's a couple.",
      "properties": {
        "backend": {
          "description": "Backend to use. Default is geth.",
          "type": "string",
          "default": "geth"
        },
        "chain": {
          "description": "Name of the chain. Default is ethereum.",
          "type": "string",
          "default": "ethereum"
        },
        "datadir": {
          "description": "The directory to store accounts in.",
          "type": "string"
        },
        "gasPrice": {
          "description": "Gas price multiplier (in Wei).",
          "type": "number"
        },
        "genesis": {
          "description": "Location of the genesis.json file. Default is datadir/genesis.json.",
          "type": "string"
        },
        "hosts": {
          "description": "A non-empty array of host IP:port addresses, in that format.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "networkid": {
          "description": "Network ID.",
          "type": "number"
        },
        "nodeName": {
          "description": "Custom node name.",
          "type": "string"
        }
      },
      "type": "object",
      "required": [
        "datadir",
        "hosts"
      ]
    },
    "IRemoteConfig": {
      "description": "For remote networks, we cannot control how they're started. But having a\nseparate type for live configurations could make code clearer.\n\nTODO[hengchu]: I'm not super sure what the parameters should be yet.",
      "properties": {
        "backend": {
          "description": "Backend to use. Default is geth.",
          "type": "string",
          "default": "geth"
        },
        "chain": {
          "description": "Name of the chain. Default is ethereum.",
          "type": "string",
          "default": "ethereum"
        },
        "keydir": {
          "description": "The directory to store accounts in.",
          "type": "string"
        },
        "hosts": {
          "description": "A non-empty array of host IP:port addresses, in that format.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "description": "This interface represents the single config file per project.",
  "properties": {
    "project": {
      "description": "The name of the project.",
      "type": "string"
    },
    "env": {
      "properties": {
        "local": {
          "$ref": "#/definitions/ILocalConfig",
          "description": "The local network overrides."
        },
        "main": {
          "$ref": "#/definitions/IRemoteConfig",
          "description": "The main network overrides."
        },
        "test": {
          "$ref": "#/definitions/IRemoteConfig",
          "description": "The test network overrides."
        }
      },
      "type": "object"
    },
    "chain": {
      "description": "Name of the chain. Default is ethereum.",
      "type": "string"
    }
  },
  "required": [
    "project",
    "chain",
    "env"
  ],
  "type": "object",
  "additionalProperties": false
}
